# Upstreamブランチからコンフリクトマーカーをつけたままマージしてプルリクエストを作成

name: Merge upstream, Pull request

on:
  # Actions タブから手動でこのワークフローを実行することを許可する．
  workflow_dispatch:
  
env:
  BRANCH_PREFIX: auto_merge_
  UPSTREAM_URL: https://github.com/snowatfeet/test_for_actions.git
  ORIGIN_REPO: hzuika/test_for_actions_fork
  USER_EMAIL: 39191601+hzuika@users.noreply.github.com
  USER_NAME: hzuika
  
jobs:
  auto_merge:

    runs-on: ubuntu-latest
    
    steps:
    
      # checkoutしないと，ワークフロー時の環境にこのリポジトリが存在しないことになる．      
      - uses: actions/checkout@v3
      
      # (マージ)コミットするときに必要なgit configを設定する．      
      - name: Set git config for merge commit
        run: |
          git config --global user.email "$USER_EMAIL"
          git config --global user.name "$USER_NAME"
      
      # 現在時刻を環境変数に格納する．
      # フォーマットは %Y%m%d%H%M%S (例: 20220529032610)
      # 使うときは部分文字列にして使う．
      - name: Get current time as env var
        env:
          TZ: 'Asia/Tokyo'
        run: |
          echo "CURRENT_TIME=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
          
      # ブランチ名は別のrunでも使用するので環境変数に入れる．
      - name: Create branch name as env var
        run: |
          T="${{ env.CURRENT_TIME }}"
          YEAR="${T:0:4}"
          MONTH="${T:4:2}"
          DAY="${T:6:2}"
          HOUR="${T:8:2}"
          MIN="${T:10:2}"
          SEC="${T:12:2}"
          BRANCH_SUFFIX="${YEAR}_${MONTH}_${DAY}_${HOUR}_${MIN}_${SEC}"
          BRANCH_NAME="${BRANCH_PREFIX}${BRANCH_SUFFIX}"
          echo "BRANCH=${BRANCH_NAME}" >> $GITHUB_ENV
          
      # 先ほどの環境変数を使用してブランチを作成してチェックアウトする．
      - name: Create and Checkout new branch
        run: git checkout -b ${{ env.BRANCH }}
       
      # エイリアス upstream にupstreamリポジトリのURLを設定する．
      - name: Set upstream repo
        run: git remote add upstream ${UPSTREAM_URL}
          
      # デフォルトでfetch-depthが1(shallow clone)らしく，マージするときに，
      # fatal: refusing to merge unrelated historiesが出るのを避けるために
      # --unshallow オプションをつけてフェッチする．      
      - name: Fetch upstream repo
        run: git fetch upstream --unshallow
      
      # upstreamをマージする．
      # コンフリクトマーカーが生成されてエラーになるが，
      # continue-on-error: true をつけることで，
      # コンフリクト(エラー)が出てもワークフローを終了させずに次のrunへ進む．

      # マージしたときの出力(コンフリクトのエラーメッセージを変数に格納してプルリクエストの本文で使用する．
      # 複数行の文字列を格納するために一度，テキストファイルに入れてから環境変数に格納する．

      # echo "::set-output name=MERGE_OUTPUT::$(git merge upstream/main)" だと，改行以降が入らない．
      # 改行文字をエスケープしないといけないらしいが，やり方がわからなかった．
      
      - name: Merge upstream repo
        id: merge
        continue-on-error: true
        run: |
          git merge upstream/main >> merge_output.txt
      
      # マージ出力結果を表示する．
      - name: Show merge output
        run: cat merge_output.txt

      # テキストファイルの内容を環境変数に格納する．
      - name: Set merge output to env
        run: echo 'MERGE_OUTPUT=$(cat merge_output.txt)' >> $GITHUB_ENV
        
      - name: Check MERGE_OUTPUT
        run: echo ${{ env.MERGE_OUTPUT }}
      
      # マージ出力が Already up to date. であれば強制終了する．
      - name: Check Already up to date.
        #if: ${{ env.MERGE_OUTPUT  == 'Already up to date.\n'}}
        run: |
          echo ${{ env.MERGE_OUTPUT  == 'Already up to date.\n'}}
          echo ${{ env.MERGE_OUTPUT  == 'Already up to date.\\n'}}
          echo ${{ env.MERGE_OUTPUT  == 'Already up to date.\r\n'}}
          echo ${{ env.MERGE_OUTPUT  == 'Already up to date.'}}
          echo ${{ env.MERGE_OUTPUT  == 'Already up to date. '}}
          echo ${{ contains(env.MERGE_OUTPUT, 'Already up to date.') }}
          echo [["${{ env.MERGE_OUTPUT }}"  == 'Already up to date.']]
          echo [["${{ env.MERGE_OUTPUT }}"  == 'Already up to date.\n']]
          if [ "${{ env.MERGE_OUTPUT }}" = "Already up to date." ]; then
            echo "String1 and String2 are equal."
          else
            echo "String1 and String2 are not equal."
          fi
          echo "No need to merge."
          exit 1
      
      - run: git status
      
      # コンフリクトマーカーごとコミットする．          
      - name: Commit merge
        run: git commit -am "Merge from upstream"
      
      # リモートリポジトリにプッシュする．          
      - name: Push this branch to origin
        run: git push origin "$BRANCH"
          
      # プルリクエストを作成する．
      # upstream を設定すると，プルリクエストのマージ先がデフォルトでupstreamになるため，
      # --repo オプションで明示的にリポジトリを指定する．
      # gh コマンドでプルリクエストを作成するためには，GH_TOKENが必要になる．
      # 環境変数に格納したマージ出力結果をプルリクエストの本文に使う．
      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          T="${{ env.CURRENT_TIME }}"
          YEAR="${T:0:4}"
          MONTH="${T:4:2}"
          DAY="${T:6:2}"
          HOUR="${T:8:2}"
          MIN="${T:10:2}"
          SEC="${T:12:2}"
          TIME="${YEAR}/${MONTH}/${DAY} ${HOUR}:${MIN}:${SEC}"
          gh pr create --head ${{ env.BRANCH }} --base "main" --repo "$ORIGIN_REPO" --title "Auto merge (${TIME})" --body "${{ env.MERGE_OUTPUT }}"
